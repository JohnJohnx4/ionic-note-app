{"version":3,"sources":["webpack:///./src/app/login/login.module.ts","webpack:///./src/app/login/login.page.html","webpack:///./src/app/login/login.page.scss","webpack:///./src/app/login/login.page.ts","webpack:///./src/app/services/login.service.ts"],"names":[],"mappings":"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","file":"login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>{{ registerUserForm ? 'Register' : 'Login' }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card padding *ngIf=\\\"!registerUserForm; else registerForm\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"email\\\" [(ngModel)]=\\\"username\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-button margin-top (click)=\\\"loginUser()\\\">Submit</ion-button>\\n  </ion-card>\\n  <ng-template #registerForm>\\n    <ion-card padding>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Email</ion-label>\\n        <ion-input type=\\\"email\\\" [(ngModel)]=\\\"username\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Password</ion-label>\\n        <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Confirm</ion-label>\\n        <ion-input type=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-button margin-top (click)=\\\"registerUser()\\\">Submit</ion-button>\\n    </ion-card>\\n  </ng-template>\\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar>\\n    <ion-text>\\n      <p margin>\\n        {{ registerUserForm ? 'Have an account?' : 'Dont have an account?' }}\\n      </p></ion-text\\n    >\\n    <ion-button slot=\\\"primary\\\" (click)=\\\"toggleReigster()\\\">{{\\n      registerUserForm ? 'Login' : 'Register'\\n    }}</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../services/login.service';\nimport { AlertController } from '@ionic/angular';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n})\nexport class LoginPage implements OnInit {\n  constructor(\n    private loginService: LoginService,\n    private alertCtrl: AlertController,\n    private router: Router\n  ) {}\n  username: string;\n  password: string;\n  confirmPassword: string;\n  registerUserForm = false;\n\n  ngOnInit() {}\n\n  toggleReigster() {\n    this.registerUserForm = !this.registerUserForm;\n  }\n\n  registerUser() {\n    if (!this.password || !this.confirmPassword || !this.username) {\n      return this.sendAlert(\n        'Missing fields',\n        'Make sure all fields are filled in!'\n      );\n    }\n    if (this.password !== this.confirmPassword) {\n      return this.sendAlert(\n        'Passwords dont match',\n        'Make sure passwords are exactly the same!'\n      );\n    }\n    this.loginService.registerUser(this.username, this.password).subscribe(\n      (res: any) => {\n        if (res.success) {\n          const token = res.token;\n          localStorage.setItem('jwt', token);\n          this.router.navigateByUrl('/notes');\n        }\n      },\n      err => this.sendAlert('Error', err.error.error)\n    );\n  }\n\n  loginUser() {\n    if (!this.password || !this.username) {\n      return this.sendAlert(\n        'Missing fields',\n        'Make sure all fields are filled in!'\n      );\n    }\n    this.loginService.loginUser(this.username, this.password).subscribe(\n      (res: any) => {\n        if (res) {\n          const token = res.token;\n          localStorage.setItem('jwt', token);\n          this.router.navigateByUrl('/notes');\n        }\n      },\n      err => this.sendAlert('Error', err.error.error)\n    );\n  }\n\n  sendAlert(title, errorMessage) {\n    this.alertCtrl\n      .create({\n        header: title,\n        message: errorMessage,\n        buttons: [\n          {\n            text: 'Got it',\n            role: 'cancel'\n          }\n        ]\n      })\n      .then(alertEl => {\n        alertEl.present();\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  // private ROOT_URL = 'http://localhost:5000';\n  private ROOT_URL = 'https://johnc-noter.herokuapp.com';\n\n  constructor(private http: HttpClient) {}\n\n  loginUser(email, password) {\n    console.log(email, password);\n    return this.http.post(\n      `${this.ROOT_URL}/api/login`,\n      {\n        email,\n        password\n      },\n      httpOptions\n    );\n  }\n  registerUser(email, password) {\n    return this.http.post(\n      `${this.ROOT_URL}/api/users/register`,\n      {\n        email,\n        password\n      },\n      httpOptions\n    );\n  }\n}\n"],"sourceRoot":""}